rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Books Collection - Public read, Admin write with enhanced validation
    match /books/{bookId} {
      allow read: if true;
      allow write: if isAdmin() && isValidBookData();
      allow create: if isAdmin() && isValidBookData();
      allow update: if isAdmin() && isValidBookData();
      allow delete: if isAdmin();
    }
    
    // Users Collection - Own data read/write, Admin read all with validation
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId && isValidUserData();
      allow read: if isAdmin();
      allow create: if request.auth != null && request.auth.uid == userId && isValidUserData();
      allow update: if request.auth != null && request.auth.uid == userId && isValidUserData();
    }
    
    // Cart Collection - Own cart only, Guest support
    match /cart/{cartId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read, write: if resource.data.userId != null && 
        resource.data.userId.matches('guest_.*');
      allow create: if request.auth != null || isValidGuestCart();
    }
    
    // Orders Collection - Own orders read, Admin read/write all with validation
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow read: if resource.data.userId != null && 
        resource.data.userId.matches('guest_.*');
      allow create: if (request.auth != null || isValidGuestOrder()) && isValidOrderData();
      allow update: if isAdmin() && isValidOrderData();
      allow delete: if isAdmin();
    }
    
    // Wishlist Collection - Own wishlist only
    match /wishlist/{wishlistId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
    }
    
    // Genres Collection - Public read, Admin write
    match /genres/{genreId} {
      allow read: if true;
      allow write: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Authors Collection - Public read, Admin write
    match /authors/{authorId} {
      allow read: if true;
      allow write: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Waitlist Collection - Own entries only, Admin read all
    match /waitlist/{waitlistId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
      allow create: if request.auth != null;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Preorders Collection - Own preorders read, Admin read/write all
    match /preorders/{preorderId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Notifications Collection - Own notifications only
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAdmin();
    }
    
    // Analytics Collection - Admin only
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
    
    // System Logs Collection - Admin only
    match /systemLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Helper Functions
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isValidGuestCart() {
      return 'userId' in request.resource.data && 
        request.resource.data.userId is string &&
        request.resource.data.userId.matches('guest_.*');
    }
    
    function isValidGuestOrder() {
      return 'userId' in request.resource.data && 
        request.resource.data.userId is string &&
        request.resource.data.userId.matches('guest_.*');
    }
    
    // Enhanced validation functions
    function isValidBookData() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'authorName', 'price', 'isAvailable']) &&
        data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
        data.authorName is string && data.authorName.size() > 0 && data.authorName.size() <= 100 &&
        data.price is number && data.price >= 0 &&
        data.isAvailable is bool &&
        (!('images' in data) || isValidImageData(data.images)) &&
        (!('description' in data) || (data.description is string && data.description.size() <= 2000));
    }
    
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'name']) &&
        data.email is string && data.email.matches('.*@.*\\..*') &&
        data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
        (!('phone' in data) || (data.phone is string && data.phone.matches('\\+?[0-9\\-\\s\\(\\)]{7,20}'))) &&
        (!('profileImage' in data) || isValidCloudinaryUrl(data.profileImage));
    }
    
    function isValidOrderData() {
      let data = request.resource.data;
      return data.keys().hasAll(['items', 'totalAmount', 'status']) &&
        data.items is list && data.items.size() > 0 &&
        data.totalAmount is number && data.totalAmount > 0 &&
        data.status is string && data.status in ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled'] &&
        (!('customer' in data) || isValidCustomerData(data.customer));
    }
    
    function isValidImageData(images) {
      return images is map &&
        (!('main' in images) || isValidCloudinaryUrl(images.main)) &&
        (!('gallery' in images) || (images.gallery is list && 
          images.gallery.size() <= 10 &&
          images.gallery.hasOnly([string]) &&
          isValidCloudinaryUrlList(images.gallery))) &&
        (!('thumbnail' in images) || isValidCloudinaryUrl(images.thumbnail));
    }
    
    function isValidCloudinaryUrl(url) {
      return url is string && 
        (url.matches('https://res\\.cloudinary\\.com/[a-zA-Z0-9_-]+/.*') ||
         url.matches('https://cloudinary\\.com/.*'));
    }
    
    function isValidCloudinaryUrlList(urls) {
      return urls.hasOnly([string]) && 
        urls.hasAll(urls.map(url, isValidCloudinaryUrl(url)));
    }
    
    function isValidCustomerData(customer) {
      return customer is map &&
        customer.keys().hasAll(['name', 'email']) &&
        customer.name is string && customer.name.size() > 0 && customer.name.size() <= 100 &&
        customer.email is string && customer.email.matches('.*@.*\\..*') &&
        (!('phone' in customer) || (customer.phone is string && customer.phone.matches('\\+?[0-9\\-\\s\\(\\)]{7,20}')));
    }
  }
}